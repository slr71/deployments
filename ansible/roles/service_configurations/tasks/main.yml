---
- name: get the list of templates from the template directory
  ansible.builtin.find:
    paths: "{{ de_releases_dir}}/templates"
    patterns: "*.j2"
    file_type: file
  register: template_list

- name: create a directory to output the rendered config files.
  ansible.builtin.file:
    path: "{{ rendered_configs_dir }}"
    state: directory

- name: render each template
  ansible.builtin.template:
    src: "{{ item.path }}"
    dest: "{{ [[ rendered_configs_dir ] + [item.path | basename | splitext | first]] | flatten | path_join }}"
    mode: 0640
  loop: "{{ template_list.files }}"

- name: load configmap data
  set_fact:
    config_data: "{{ config_data | default({}) | combine({ item | basename : lookup('file', item) | b64encode }) }}"
  with_fileglob: "{{ rendered_configs_dir }}/*"

- name: load the configurations into the cluster
  run_once: True
  environment:
    KUBECONFIG: "{{ lookup('env', 'KUBECONFIG') }}"
  block:
    - name: get the list of templates from the template directory
      ansible.builtin.find:
        paths: "{{ de_releases_dir}}/templates"
        patterns: "*.j2"
        file_type: file
      register: template_list
      tags:
        - local-confgs

    - name: create a directory to output the rendered config files.
      ansible.builtin.file:
        path: "{{ rendered_configs_dir }}"
        state: directory
      tags:
        - local-confgs

    - name: render each template
      ansible.builtin.template:
        src: "{{ item.path }}"
        dest: "{{ [[ rendered_configs_dir ] + [item.path | basename | splitext | first]] | flatten | path_join }}"
        mode: 0640
      loop: "{{ template_list.files }}"
      tags:
        - local-confgs

    - name: load configmap data
      set_fact:
        config_data: "{{ config_data | default({}) | combine({ item | basename : lookup('file', item) | b64encode }) }}"
      with_fileglob: "{{ rendered_configs_dir }}/*"
      tags:
        - local-confgs

    - name: load the configurations into the cluster
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: service-configs
            namespace: "{{ ns }}"
          data: "{{ config_data }}"
      when: load_configs is undefined or (load_configs | bool)

    - name: remove the locally rendered files
      run_once: True
      ansible.builtin.file:
        path: "{{ rendered_configs_dir }}"
        state: absent
      when: remove_local_configs is undefined or (remove_local_configs | bool)

    - name: create the configs secret
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: configs
            namespace: "{{ ns }}"
          type: Opaque
          stringData:
            DE_ENV: "{{ ns }}"
            USER_SUFFIX: "{{ uid_domain }}"
            QMS_DATABASE_URI: "postgresql://{{ dbms_connection_user }}:{{ dbms_connection_pass | urlencode }}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/{{ qms_db_name }}?sslmode=disable"
            DE_DATABASE_URI: "postgresql://{{ dbms_connection_user }}:{{ dbms_connection_pass | urlencode }}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/{{ de_db_name }}?sslmode=disable"
            NOTIFICATIONS_DATABASE_URI: "postgresql://{{ dbms_connection_user }}:{{ dbms_connection_pass | urlencode }}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/{{ notifications_db_name }}?sslmode=disable"
            METADATA_DATABASE_URI: "postgresql://{{ dbms_connection_user }}:{{ dbms_connection_pass | urlencode }}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/{{ metadata_db_name }}?sslmode=disable"
            QMS_DATABASE_REINIT: "{{ qms_reinitialize | string}}"
            QMS_DATABASE_MIGRATE: "{{ qms_automigrate | string}}"
            USERNAME_SUFFIX: "@{{ uid_domain }}"
            OTEL_TRACES_EXPORTER: "{% if jaeger_enabled == True %}jaeger{% else %}none{% endif %}"
            OTEL_EXPORTER_JAEGER_ENDPOINT: "{{ jaeger_endpoint }}"
            OTEL_EXPORTER_JAEGER_HTTP_ENDPOINT: "{{ jaeger_http_endpoint }}"
            NATS_URLS: "{{ nats_urls }}"
            NATS_TLS_CERT: "/etc/nats/tls/tls.crt"
            NATS_TLS_KEY: "/etc/nats/tls/tls.key"
            NATS_TLS_CA_CERT: "/etc/nats/tls/ca.crt"
            NATS_CREDS_PATH: "/etc/nats/creds/services.creds"
            NATS_RECONNECTS_MAX: "10"
            NATS_RECONNECTS_WAIT: "1"
      when: load_configs is undefined or (load_configs | bool)

    - name: create the timezone configmap
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: timezone
            namespace: "{{ ns }}"
          data:
            timezone: "{{ timezone }}"
      when: load_configs is undefined or (load_configs | bool)

    - name: create the java tool options configmap
      run_once: True
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: java-tool-options
            namespace: "{{ ns }}"
          data:
            low: "{{ jvm_opts_low }}"
            high: "{{ jvm_opts_high }}"
            ui: "{{ jvm_opts_ui }}"
      when: load_configs is undefined or (load_configs | bool)
